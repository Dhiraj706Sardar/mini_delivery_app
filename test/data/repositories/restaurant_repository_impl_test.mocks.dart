// Mocks generated by Mockito 5.4.6 from annotations
// in deliery_app/test/data/repositories/restaurant_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:deliery_app/core/network/api_client.dart' as _i3;
import 'package:deliery_app/data/datasources/menu_cache_datasource.dart' as _i5;
import 'package:deliery_app/data/models/menu_item.dart' as _i6;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i3.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeClient_0(this, Invocation.getter(#client)),
          )
          as _i2.Client);

  @override
  bool get enableLogging =>
      (super.noSuchMethod(Invocation.getter(#enableLogging), returnValue: false)
          as bool);

  @override
  _i4.Future<Map<String, dynamic>> get(String? endpoint) =>
      (super.noSuchMethod(
            Invocation.method(#get, [endpoint]),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> post(
    String? endpoint,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#post, [endpoint, data]),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> put(
    String? endpoint,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#put, [endpoint, data]),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> delete(String? endpoint) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [endpoint]),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [MenuCacheDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMenuCacheDataSource extends _i1.Mock
    implements _i5.MenuCacheDataSource {
  MockMenuCacheDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> cacheMenuItems(
    String? restaurantId,
    List<_i6.MenuItem>? menuItems,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#cacheMenuItems, [restaurantId, menuItems]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.MenuItem>?> getCachedMenuItems(String? restaurantId) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedMenuItems, [restaurantId]),
            returnValue: _i4.Future<List<_i6.MenuItem>?>.value(),
          )
          as _i4.Future<List<_i6.MenuItem>?>);

  @override
  _i4.Future<void> clearMenuCache(String? restaurantId) =>
      (super.noSuchMethod(
            Invocation.method(#clearMenuCache, [restaurantId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> clearAllMenuCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllMenuCache, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> hasMenuCache(String? restaurantId) =>
      (super.noSuchMethod(
            Invocation.method(#hasMenuCache, [restaurantId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> isCacheValid(String? restaurantId) =>
      (super.noSuchMethod(
            Invocation.method(#isCacheValid, [restaurantId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<List<_i6.MenuItem>?> getCachedMenuItemsIgnoreExpiry(
    String? restaurantId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedMenuItemsIgnoreExpiry, [restaurantId]),
            returnValue: _i4.Future<List<_i6.MenuItem>?>.value(),
          )
          as _i4.Future<List<_i6.MenuItem>?>);
}
