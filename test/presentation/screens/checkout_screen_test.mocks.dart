// Mocks generated by Mockito 5.4.6 from annotations
// in deliery_app/test/presentation/screens/checkout_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:deliery_app/presentation/blocs/cart/cart_bloc.dart' as _i4;
import 'package:deliery_app/presentation/blocs/cart/cart_event.dart' as _i6;
import 'package:deliery_app/presentation/blocs/cart/cart_state.dart' as _i2;
import 'package:deliery_app/presentation/blocs/order/order_bloc.dart' as _i8;
import 'package:deliery_app/presentation/blocs/order/order_event.dart' as _i9;
import 'package:deliery_app/presentation/blocs/order/order_state.dart' as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCartState_0 extends _i1.SmartFake implements _i2.CartState {
  _FakeCartState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeOrderState_1 extends _i1.SmartFake implements _i3.OrderState {
  _FakeOrderState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CartBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartBloc extends _i1.Mock implements _i4.CartBloc {
  MockCartBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CartState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeCartState_0(this, Invocation.getter(#state)),
          )
          as _i2.CartState);

  @override
  _i5.Stream<_i2.CartState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i2.CartState>.empty(),
          )
          as _i5.Stream<_i2.CartState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i6.CartEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i6.CartEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i2.CartState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i6.CartEvent>(
    _i7.EventHandler<E, _i2.CartState>? handler, {
    _i7.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(_i7.Transition<_i6.CartEvent, _i2.CartState>? transition) =>
      super.noSuchMethod(
        Invocation.method(#onTransition, [transition]),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void onChange(_i7.Change<_i2.CartState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [OrderBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockOrderBloc extends _i1.Mock implements _i8.OrderBloc {
  MockOrderBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.OrderState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeOrderState_1(this, Invocation.getter(#state)),
          )
          as _i3.OrderState);

  @override
  _i5.Stream<_i3.OrderState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i3.OrderState>.empty(),
          )
          as _i5.Stream<_i3.OrderState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i9.OrderEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i9.OrderEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i3.OrderState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i9.OrderEvent>(
    _i7.EventHandler<E, _i3.OrderState>? handler, {
    _i7.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i7.Transition<_i9.OrderEvent, _i3.OrderState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void onChange(_i7.Change<_i3.OrderState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
